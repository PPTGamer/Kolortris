import javax.swing.*;
import java.awt.geom.*;
import java.awt.*;
import java.io.*;
import java.util.*;
import java.net.*;
import java.awt.event.*;

enum ClientState{
	INACTIVE,READY,INGAME,GAMEOVER;
}
/**
 *	The <code>GameClient</code> class handles a single {@link ClientThread ClientThread} and  {@link GameInstance GameInstance}.
**/
class GameClient extends NetworkingComponent{
	private Integer myClientID;
	private ClientThread myClientThread;
	private GameInstance myGameInstance;
	private ClientState currentState;
	private Socket mySocket;
	/**
	 *	Creates a new  <code>GameClient</code> with an associated <code>GameInstance</code>.
	 *	@param gameInstance the <code>GameInstance</code> to associate this <code>GameClient</code> with
	**/
	public GameClient(GameInstance gameInstance){
		this.myGameInstance = gameInstance;
		this.myClientThread = null;
		this.mySocket = null;
		this.myClientID = null;
		this.currentState = ClientState.INACTIVE;
	}
	/**
	 *	Connects to a given IP address, and starts a new {@link ClientThread ClientThread}.
	 *	@param IPAddress the IP address (or host name) to connect to
	 *	@return <code>true</code> if connection was successful, and <code>false</code> otherwise
	**/
	public boolean connectTo(String IPAddress){
		try{
			mySocket = new Socket(IPAddress,PORT_NUMBER);
			myClientThread = new ClientThread(this,mySocket);
			myClientThread.start();
			while(this.getClientID()==null){Thread.sleep(20);}
			return true;
		}catch(Exception e){
			System.out.println("Failed to connect to " + IPAddress);
			return false;
		}
	}
	/**
	 *	Destroys all threads handled by this <code>GameClient</code>.
	**/
	public synchronized void destroy(){
		if(myClientThread!=null) {
			myClientThread.interrupt();
			myClientThread = null;
		}
	}
	/**
	 *	Returns <code>true</code> if this client has been told to end the game.
	 *	@return <code>true</code> if this client has been told to end the game, and <code>false</code> otherwise
	**/
	public synchronized boolean isGameOver(){return currentState == ClientState.GAMEOVER;}
	/**
	 *	Returns the <code>Playfield</code> controlled by this <code>GameClient</code>.
	 *	@return the <code>Playfield</code> controlled by this <code>GameClient</code>
	**/
	public synchronized Playfield getMyField(){
		return myGameInstance.getPlayfield(myClientID);
	}
	/**
	 *	Returns the <code>Records</code> associated with this <code>GameClient</code>.
	 *	@return the <code>Records</code> associated with this <code>GameClient</code>
	**/
	public synchronized ArrayList<GameInstance.Record> getRecords(){
		return myGameInstance.getRecords();
	}
	/**
	 *	Returns the <code>GameInstance</code> associated with this <code>GameClient</code>.
	 *	@return the <code>GameInstance</code> associated with this <code>GameClient</code>
	**/
	public synchronized GameInstance getGameInstance(){
		return myGameInstance;
	}
	/**
	 *	Returns the client ID given to this <code>GameClient</code>.
	 *	@return the client ID given to this <code>GameClient</code>
	**/
	public synchronized Integer getClientID(){ return this.myClientID; }
	/**
	 *	Sets the client ID of this <code>GameClient</code>.
	 *	@param newID the ID to give to this <code>GameClient</code>.
	**/
	public synchronized void setClientID(int newID){
		this.myClientID = newID;
		currentState = ClientState.READY;
	}
	/**
	 *	Processes an instruction from the server.
	 *	@param data an instruction generated by a {@link GameServer GameServer} or {@link ServerThread ServerThread}
	**/
	public synchronized void process(String data){
		if(currentState == ClientState.INACTIVE) return;
		if(data.equals("StartGame")){
			System.err.println(myClientID+" received StartGame command.");
			myGameInstance.getPlayfield(myClientID).startLogic();
			currentState = ClientState.INGAME;
		}else if(data.equals("EndGame")){
			System.err.println(myClientID+" received EndGame command.");
			myGameInstance.getPlayfield(myClientID).stopLogic();
			currentState = ClientState.GAMEOVER;
		}else if(data.split(",")[0].equals("addGarbage")){
			System.err.println(myClientID+" received addGarbage command.");
			myGameInstance.getPlayfield(myClientID).addGarbageToQueue(Integer.parseInt(data.split(",")[1]));
		}else if(data.indexOf("GameInstanceEnd")>=0){
			myGameInstance.loadData(data,myClientID);
		}
	}
}
